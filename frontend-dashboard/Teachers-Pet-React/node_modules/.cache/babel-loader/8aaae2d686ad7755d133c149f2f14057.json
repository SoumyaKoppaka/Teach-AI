{"ast":null,"code":"import _classCallCheck from \"/Users/dingsihan/Desktop/frontendv1/Teachers-Pet-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dingsihan/Desktop/frontendv1/Teachers-Pet-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dingsihan/Desktop/frontendv1/Teachers-Pet-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dingsihan/Desktop/frontendv1/Teachers-Pet-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dingsihan/Desktop/frontendv1/Teachers-Pet-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dingsihan/Desktop/frontendv1/Teachers-Pet-React/src/views/Notifications/Notifications.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Form, FormGroup, FormControl, FormLabel, Button } from 'react-bootstrap';\nimport './login.sass';\nimport { isEmail, isEmpty, isLength, isContainWhiteSpace } from './validator';\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n\n    _this.handleInputChange = function (event) {\n      var target = event.target;\n      var value = target.value;\n      var name = target.name;\n      var formData = _this.state.formData;\n      formData[name] = value;\n\n      _this.setState({\n        formData: formData\n      });\n    };\n\n    _this.validateLoginForm = function (e) {\n      var errors = {};\n      var formData = _this.state.formData;\n\n      if (isEmpty(formData.email)) {\n        errors.email = \"Email can't be blank\";\n      } else if (!isEmail(formData.email)) {\n        errors.email = \"Please enter a valid email\";\n      }\n\n      if (isEmpty(formData.password)) {\n        errors.password = \"Password can't be blank\";\n      } else if (isContainWhiteSpace(formData.password)) {\n        errors.password = \"Password should not contain white spaces\";\n      } else if (!isLength(formData.password, {\n        gte: 6,\n        lte: 16,\n        trim: true\n      })) {\n        errors.password = \"Password's length must between 6 to 16\";\n      }\n\n      if (isEmpty(errors)) {\n        return true;\n      } else {\n        return errors;\n      }\n    };\n\n    _this.login = function (e) {\n      e.preventDefault();\n\n      var errors = _this.validateLoginForm();\n\n      if (errors === true) {\n        alert(\"You are successfully signed in...\");\n        window.location.reload();\n      } else {\n        _this.setState({\n          errors: errors,\n          formSubmitted: true\n        });\n      }\n    };\n\n    _this.state = {\n      formData: {},\n      // Contains login form data\n      errors: {},\n      // Contains login field errors\n      formSubmitted: false,\n      // Indicates submit status of login form \n      loading: false // Indicates in progress state of login form\n\n    };\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          errors = _this$state.errors,\n          formSubmitted = _this$state.formSubmitted;\n      return React.createElement(\"div\", {\n        className: \"Login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        class: \"avatar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"images/avatar.jpg\",\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Gabriel Sze\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"School of Computer Science and Engineering\")), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        controlId: \"email\",\n        validationState: formSubmitted ? errors.email ? 'error' : 'success' : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(FormLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Email\"), React.createElement(FormControl, {\n        type: \"text\",\n        name: \"email\",\n        placeholder: \"Enter your email\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), errors.email && {\n        /* <HelpBlock>{errors.email}</HelpBlock>  */\n      }), React.createElement(FormGroup, {\n        controlId: \"password\",\n        validationState: formSubmitted ? errors.password ? 'error' : 'success' : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(FormLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Password\"), React.createElement(FormControl, {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Enter your password\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), errors.password && {\n        /* <HelpBlock>{errors.password}</HelpBlock>  */\n      }), React.createElement(Button, {\n        type: \"submit\",\n        bsStyle: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Sign-In\"))));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport default Login;","map":{"version":3,"sources":["/Users/dingsihan/Desktop/frontendv1/Teachers-Pet-React/src/views/Notifications/Notifications.jsx"],"names":["React","Component","Row","Form","FormGroup","FormControl","FormLabel","Button","isEmail","isEmpty","isLength","isContainWhiteSpace","Login","props","handleInputChange","event","target","value","name","formData","state","setState","validateLoginForm","e","errors","email","password","gte","lte","trim","login","preventDefault","alert","window","location","reload","formSubmitted","loading"],"mappings":";;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,WAA/B,EAA4CC,SAA5C,EAAuDC,MAAvD,QAAqE,iBAArE;AACA,OAAO,cAAP;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,QAA3B,EAAqCC,mBAArC,QAAgE,aAAhE;;IAEMC,K;;;;;AAEF,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;;AADe,UAWnBC,iBAXmB,GAWC,UAACC,KAAD,EAAW;AAC3B,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,UAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AAH2B,UAKrBC,QALqB,GAKR,MAAKC,KALG,CAKrBD,QALqB;AAM3BA,MAAAA,QAAQ,CAACD,IAAD,CAAR,GAAiBD,KAAjB;;AAEA,YAAKI,QAAL,CAAc;AACVF,QAAAA,QAAQ,EAAEA;AADA,OAAd;AAGH,KAtBkB;;AAAA,UAwBnBG,iBAxBmB,GAwBC,UAACC,CAAD,EAAO;AAEvB,UAAIC,MAAM,GAAG,EAAb;AAFuB,UAGfL,QAHe,GAGF,MAAKC,KAHH,CAGfD,QAHe;;AAKvB,UAAIV,OAAO,CAACU,QAAQ,CAACM,KAAV,CAAX,EAA6B;AACzBD,QAAAA,MAAM,CAACC,KAAP,GAAe,sBAAf;AACH,OAFD,MAEO,IAAI,CAACjB,OAAO,CAACW,QAAQ,CAACM,KAAV,CAAZ,EAA8B;AACjCD,QAAAA,MAAM,CAACC,KAAP,GAAe,4BAAf;AACH;;AAED,UAAIhB,OAAO,CAACU,QAAQ,CAACO,QAAV,CAAX,EAAgC;AAC5BF,QAAAA,MAAM,CAACE,QAAP,GAAkB,yBAAlB;AACH,OAFD,MAEQ,IAAIf,mBAAmB,CAACQ,QAAQ,CAACO,QAAV,CAAvB,EAA4C;AAChDF,QAAAA,MAAM,CAACE,QAAP,GAAkB,0CAAlB;AACH,OAFO,MAED,IAAI,CAAChB,QAAQ,CAACS,QAAQ,CAACO,QAAV,EAAoB;AAAEC,QAAAA,GAAG,EAAE,CAAP;AAAUC,QAAAA,GAAG,EAAE,EAAf;AAAmBC,QAAAA,IAAI,EAAE;AAAzB,OAApB,CAAb,EAAmE;AACtEL,QAAAA,MAAM,CAACE,QAAP,GAAkB,wCAAlB;AACH;;AAED,UAAIjB,OAAO,CAACe,MAAD,CAAX,EAAqB;AACjB,eAAO,IAAP;AACH,OAFD,MAEO;AACH,eAAOA,MAAP;AACH;AACJ,KAhDkB;;AAAA,UAkDnBM,KAlDmB,GAkDX,UAACP,CAAD,EAAO;AAEXA,MAAAA,CAAC,CAACQ,cAAF;;AAEA,UAAIP,MAAM,GAAG,MAAKF,iBAAL,EAAb;;AAEA,UAAGE,MAAM,KAAK,IAAd,EAAmB;AACfQ,QAAAA,KAAK,CAAC,mCAAD,CAAL;AACAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,OAHD,MAGO;AACH,cAAKd,QAAL,CAAc;AACVG,UAAAA,MAAM,EAAEA,MADE;AAEVY,UAAAA,aAAa,EAAE;AAFL,SAAd;AAIH;AACJ,KAjEkB;;AAGf,UAAKhB,KAAL,GAAa;AACTD,MAAAA,QAAQ,EAAE,EADD;AACK;AACdK,MAAAA,MAAM,EAAE,EAFC;AAEG;AACZY,MAAAA,aAAa,EAAE,KAHN;AAGa;AACtBC,MAAAA,OAAO,EAAE,KAJA,CAIM;;AAJN,KAAb;AAHe;AASlB;;;;6BA0DQ;AAAA,wBAE6B,KAAKjB,KAFlC;AAAA,UAEGI,MAFH,eAEGA,MAFH;AAAA,UAEWY,aAFX,eAEWA,aAFX;AAIL,aACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,KAAK,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,KAAK,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqB;AAAK,QAAA,GAAG,EAAC,mBAAT;AAA6B,QAAA,GAAG,EAAC,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAArB,CADJ,EAEX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFW,EAGX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAHW,CADJ,EAMI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,QAAQ,EAAE,KAAKN,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAC,OAArB;AAA6B,QAAA,eAAe,EAAGM,aAAa,GAAIZ,MAAM,CAACC,KAAP,GAAe,OAAf,GAAyB,SAA7B,GAA0C,IAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI,oBAAC,WAAD;AAAa,QAAA,IAAI,EAAC,MAAlB;AAAyB,QAAA,IAAI,EAAC,OAA9B;AAAsC,QAAA,WAAW,EAAC,kBAAlD;AAAqE,QAAA,QAAQ,EAAE,KAAKX,iBAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGEU,MAAM,CAACC,KAAP,IACE;AAAC;AAAD,OAJJ,CADJ,EAQI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAC,UAArB;AAAgC,QAAA,eAAe,EAAGW,aAAa,GAAIZ,MAAM,CAACE,QAAP,GAAkB,OAAlB,GAA4B,SAAhC,GAA6C,IAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI,oBAAC,WAAD;AAAa,QAAA,IAAI,EAAC,UAAlB;AAA6B,QAAA,IAAI,EAAC,UAAlC;AAA6C,QAAA,WAAW,EAAC,qBAAzD;AAA+E,QAAA,QAAQ,EAAE,KAAKZ,iBAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGEU,MAAM,CAACE,QAAP,IACE;AAAC;AAAD,OAJJ,CARJ,EAeI,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAfJ,CADJ,CANJ,CADJ;AA4BH;;;;EArGezB,S;;AAwGpB,eAAeW,KAAf","sourcesContent":["\nimport React, { Component } from \"react\";\nimport { Row, Form, FormGroup, FormControl, FormLabel, Button } from 'react-bootstrap';\nimport './login.sass';\nimport { isEmail, isEmpty, isLength, isContainWhiteSpace } from './validator';\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            formData: {}, // Contains login form data\n            errors: {}, // Contains login field errors\n            formSubmitted: false, // Indicates submit status of login form \n            loading: false // Indicates in progress state of login form\n        }\n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        let { formData } = this.state;\n        formData[name] = value;\n\n        this.setState({\n            formData: formData\n        });\n    }\n\n    validateLoginForm = (e) => {\n        \n        let errors = {};\n        const { formData } = this.state;\n\n        if (isEmpty(formData.email)) {\n            errors.email = \"Email can't be blank\";\n        } else if (!isEmail(formData.email)) {\n            errors.email = \"Please enter a valid email\";\n        }\n\n        if (isEmpty(formData.password)) {\n            errors.password = \"Password can't be blank\";\n        }  else if (isContainWhiteSpace(formData.password)) {\n            errors.password = \"Password should not contain white spaces\";\n        } else if (!isLength(formData.password, { gte: 6, lte: 16, trim: true })) {\n            errors.password = \"Password's length must between 6 to 16\";\n        }\n\n        if (isEmpty(errors)) {\n            return true;\n        } else {\n            return errors;\n        }    \n    }\n\n    login = (e) => {\n        \n        e.preventDefault();\n\n        let errors = this.validateLoginForm();\n\n        if(errors === true){\n            alert(\"You are successfully signed in...\");\n            window.location.reload()   \n        } else {\n            this.setState({\n                errors: errors,\n                formSubmitted: true\n            });\n        }\n    }\n\n    render() {\n\n        const { errors, formSubmitted } = this.state;\n\n        return (\n            <div className=\"Login\">\n                <div class=\"profile\">\n                    <span class=\"avatar\"><img src=\"images/avatar.jpg\" alt=\"\" /></span>\n\t\t\t\t\t<h1>Gabriel Sze</h1>\n\t\t\t\t\t<p>School of Computer Science and Engineering</p>\n                </div>\n                <Row>\n                    <form onSubmit={this.login}>\n                        <FormGroup controlId=\"email\" validationState={ formSubmitted ? (errors.email ? 'error' : 'success') : null }>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl type=\"text\" name=\"email\" placeholder=\"Enter your email\" onChange={this.handleInputChange} />\n                        { errors.email && \n                            {/* <HelpBlock>{errors.email}</HelpBlock>  */}\n                        }\n                        </FormGroup >\n                        <FormGroup controlId=\"password\" validationState={ formSubmitted ? (errors.password ? 'error' : 'success') : null }>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl type=\"password\" name=\"password\" placeholder=\"Enter your password\" onChange={this.handleInputChange} />\n                        { errors.password && \n                            {/* <HelpBlock>{errors.password}</HelpBlock>  */}\n                        }\n                        </FormGroup>\n                        <Button type=\"submit\" bsStyle=\"primary\">Sign-In</Button>\n                    </form>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}