{"ast":null,"code":"// ##############################\n// // // javascript library for creating charts\n// #############################\nvar Chartist = require(\"chartist\"); // ##############################\n// // // variables used to create animation on charts\n// #############################\n\n\nvar delays = 80,\n    durations = 500;\nvar delays2 = 80,\n    durations2 = 500; // ##############################\n// // // EngagementValue\n// #############################\n\nvar dailyEngagementValue = {\n  data: {\n    labels: [\"M\", \"T\", \"W\", \"T\", \"F\"],\n    series: [[60, 80, 75, 70, 90]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 100,\n    // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: -50,\n      bottom: -15,\n      left: 0\n    }\n  },\n  // for animation\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n}; // ##############################\n// // // Monthly Engagement Value\n// #############################\n\nvar monthlyEngagementValue = {\n  data: {\n    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    series: [[54.2, 44.3, 32.0, 78.0, 55.3, 45.3, 32.6, 43.4, 56.8, 61.0, 75.6, 89.5]]\n  },\n  options: {\n    axisX: {\n      showGrid: false\n    },\n    low: 0,\n    high: 100,\n    chartPadding: {\n      top: 0,\n      right: 5,\n      bottom: -15,\n      left: 0\n    }\n  },\n  responsiveOptions: [[\"screen and (max-width: 640px)\", {\n    seriesBarDistance: 5,\n    axisX: {\n      labelInterpolationFnc: function labelInterpolationFnc(value) {\n        return value[0];\n      }\n    }\n  }]],\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"bar\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n}; // ##############################\n// // // Completed Tasks\n// #############################\n\nvar completedTasksChart = {\n  data: {\n    labels: [\"12am\", \"3pm\", \"6pm\", \"9pm\", \"12pm\", \"3am\", \"6am\", \"9am\"],\n    series: [[230, 750, 450, 300, 280, 240, 200, 190]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 1000,\n    // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\nmodule.exports = {\n  dailyEngagementValue: dailyEngagementValue,\n  monthlyEngagementValue: monthlyEngagementValue,\n  completedTasksChart: completedTasksChart\n};","map":{"version":3,"sources":["/Users/dingsihan/Desktop/frontendv1/Teachers-Pet-React/src/variables/charts.jsx"],"names":["Chartist","require","delays","durations","delays2","durations2","dailyEngagementValue","data","labels","series","options","lineSmooth","Interpolation","cardinal","tension","low","high","chartPadding","top","right","bottom","left","animation","draw","type","element","animate","d","begin","dur","from","path","clone","scale","translate","chartRect","height","stringify","to","easing","Svg","Easing","easeOutQuint","opacity","index","monthlyEngagementValue","axisX","showGrid","responsiveOptions","seriesBarDistance","labelInterpolationFnc","value","completedTasksChart","module","exports"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB,C,CAEA;AACA;AACA;;;AACA,IAAIC,MAAM,GAAG,EAAb;AAAA,IACCC,SAAS,GAAG,GADb;AAEA,IAAIC,OAAO,GAAG,EAAd;AAAA,IACCC,UAAU,GAAG,GADd,C,CAGA;AACA;AACA;;AAEA,IAAMC,oBAAoB,GAAG;AAC5BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CADJ;AAEJC,IAAAA,MAAM,EAAE,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAD;AAFJ,GADsB;AAK5BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAEX,QAAQ,CAACY,aAAT,CAAuBC,QAAvB,CAAgC;AAC1CC,MAAAA,OAAO,EAAE;AADiC,KAAhC,CADL;AAIPC,IAAAA,GAAG,EAAE,CAJE;AAKPC,IAAAA,IAAI,EAAE,GALC;AAKI;AACXC,IAAAA,YAAY,EAAE;AACZC,MAAAA,GAAG,EAAE,CADO;AAEZC,MAAAA,KAAK,EAAE,CAAC,EAFI;AAGZC,MAAAA,MAAM,EAAE,CAAC,EAHG;AAIZC,MAAAA,IAAI,EAAE;AAJM;AANP,GALmB;AAkB5B;AACAC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,cAAShB,IAAT,EAAe;AACnB,UAAIA,IAAI,CAACiB,IAAL,KAAc,MAAd,IAAwBjB,IAAI,CAACiB,IAAL,KAAc,MAA1C,EAAkD;AAChDjB,QAAAA,IAAI,CAACkB,OAAL,CAAaC,OAAb,CAAqB;AACnBC,UAAAA,CAAC,EAAE;AACDC,YAAAA,KAAK,EAAE,GADN;AAEDC,YAAAA,GAAG,EAAE,GAFJ;AAGDC,YAAAA,IAAI,EAAEvB,IAAI,CAACwB,IAAL,CACHC,KADG,GAEHC,KAFG,CAEG,CAFH,EAEM,CAFN,EAGHC,SAHG,CAGO,CAHP,EAGU3B,IAAI,CAAC4B,SAAL,CAAeC,MAAf,EAHV,EAIHC,SAJG,EAHL;AAQDC,YAAAA,EAAE,EAAE/B,IAAI,CAACwB,IAAL,CAAUC,KAAV,GAAkBK,SAAlB,EARH;AASDE,YAAAA,MAAM,EAAEvC,QAAQ,CAACwC,GAAT,CAAaC,MAAb,CAAoBC;AAT3B;AADgB,SAArB;AAaD,OAdD,MAcO,IAAInC,IAAI,CAACiB,IAAL,KAAc,OAAlB,EAA2B;AAChCjB,QAAAA,IAAI,CAACkB,OAAL,CAAaC,OAAb,CAAqB;AACnBiB,UAAAA,OAAO,EAAE;AACPf,YAAAA,KAAK,EAAE,CAACrB,IAAI,CAACqC,KAAL,GAAa,CAAd,IAAmB1C,MADnB;AAEP2B,YAAAA,GAAG,EAAE1B,SAFE;AAGP2B,YAAAA,IAAI,EAAE,CAHC;AAIPQ,YAAAA,EAAE,EAAE,CAJG;AAKPC,YAAAA,MAAM,EAAE;AALD;AADU,SAArB;AASD;AACF;AA3BQ;AAnBiB,CAA7B,C,CAkDA;AACA;AACA;;AAEA,IAAMM,sBAAsB,GAAG;AAC9BtC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,CACN,KADM,EAEN,KAFM,EAGN,KAHM,EAIN,KAJM,EAKN,KALM,EAMN,KANM,EAON,KAPM,EAQN,KARM,EASN,KATM,EAUN,KAVM,EAWN,KAXM,EAYN,KAZM,CADJ;AAeJC,IAAAA,MAAM,EAAE,CAAC,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,CAAD;AAfJ,GADwB;AAkB9BC,EAAAA,OAAO,EAAE;AACPoC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE;AADL,KADA;AAIPhC,IAAAA,GAAG,EAAE,CAJE;AAKPC,IAAAA,IAAI,EAAE,GALC;AAMPC,IAAAA,YAAY,EAAE;AACZC,MAAAA,GAAG,EAAE,CADO;AAEZC,MAAAA,KAAK,EAAE,CAFK;AAGZC,MAAAA,MAAM,EAAE,CAAC,EAHG;AAIZC,MAAAA,IAAI,EAAE;AAJM;AANP,GAlBqB;AA+B9B2B,EAAAA,iBAAiB,EAAE,CACjB,CACE,+BADF,EAEE;AACEC,IAAAA,iBAAiB,EAAE,CADrB;AAEEH,IAAAA,KAAK,EAAE;AACLI,MAAAA,qBAAqB,EAAE,+BAASC,KAAT,EAAgB;AACrC,eAAOA,KAAK,CAAC,CAAD,CAAZ;AACD;AAHI;AAFT,GAFF,CADiB,CA/BW;AA4C9B7B,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,cAAShB,IAAT,EAAe;AACnB,UAAIA,IAAI,CAACiB,IAAL,KAAc,KAAlB,EAAyB;AACvBjB,QAAAA,IAAI,CAACkB,OAAL,CAAaC,OAAb,CAAqB;AACnBiB,UAAAA,OAAO,EAAE;AACPf,YAAAA,KAAK,EAAE,CAACrB,IAAI,CAACqC,KAAL,GAAa,CAAd,IAAmBxC,OADnB;AAEPyB,YAAAA,GAAG,EAAExB,UAFE;AAGPyB,YAAAA,IAAI,EAAE,CAHC;AAIPQ,YAAAA,EAAE,EAAE,CAJG;AAKPC,YAAAA,MAAM,EAAE;AALD;AADU,SAArB;AASD;AACF;AAbQ;AA5CmB,CAA/B,C,CA6DA;AACA;AACA;;AAEA,IAAMa,mBAAmB,GAAG;AAC3B7C,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,MAA9B,EAAsC,KAAtC,EAA6C,KAA7C,EAAoD,KAApD,CADJ;AAEJC,IAAAA,MAAM,EAAE,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAAD;AAFJ,GADqB;AAK3BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAEX,QAAQ,CAACY,aAAT,CAAuBC,QAAvB,CAAgC;AAC1CC,MAAAA,OAAO,EAAE;AADiC,KAAhC,CADL;AAIPC,IAAAA,GAAG,EAAE,CAJE;AAKPC,IAAAA,IAAI,EAAE,IALC;AAKK;AACZC,IAAAA,YAAY,EAAE;AACZC,MAAAA,GAAG,EAAE,CADO;AAEZC,MAAAA,KAAK,EAAE,CAFK;AAGZC,MAAAA,MAAM,EAAE,CAHI;AAIZC,MAAAA,IAAI,EAAE;AAJM;AANP,GALkB;AAkB3BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,cAAShB,IAAT,EAAe;AACnB,UAAIA,IAAI,CAACiB,IAAL,KAAc,MAAd,IAAwBjB,IAAI,CAACiB,IAAL,KAAc,MAA1C,EAAkD;AAChDjB,QAAAA,IAAI,CAACkB,OAAL,CAAaC,OAAb,CAAqB;AACnBC,UAAAA,CAAC,EAAE;AACDC,YAAAA,KAAK,EAAE,GADN;AAEDC,YAAAA,GAAG,EAAE,GAFJ;AAGDC,YAAAA,IAAI,EAAEvB,IAAI,CAACwB,IAAL,CACHC,KADG,GAEHC,KAFG,CAEG,CAFH,EAEM,CAFN,EAGHC,SAHG,CAGO,CAHP,EAGU3B,IAAI,CAAC4B,SAAL,CAAeC,MAAf,EAHV,EAIHC,SAJG,EAHL;AAQDC,YAAAA,EAAE,EAAE/B,IAAI,CAACwB,IAAL,CAAUC,KAAV,GAAkBK,SAAlB,EARH;AASDE,YAAAA,MAAM,EAAEvC,QAAQ,CAACwC,GAAT,CAAaC,MAAb,CAAoBC;AAT3B;AADgB,SAArB;AAaD,OAdD,MAcO,IAAInC,IAAI,CAACiB,IAAL,KAAc,OAAlB,EAA2B;AAChCjB,QAAAA,IAAI,CAACkB,OAAL,CAAaC,OAAb,CAAqB;AACnBiB,UAAAA,OAAO,EAAE;AACPf,YAAAA,KAAK,EAAE,CAACrB,IAAI,CAACqC,KAAL,GAAa,CAAd,IAAmB1C,MADnB;AAEP2B,YAAAA,GAAG,EAAE1B,SAFE;AAGP2B,YAAAA,IAAI,EAAE,CAHC;AAIPQ,YAAAA,EAAE,EAAE,CAJG;AAKPC,YAAAA,MAAM,EAAE;AALD;AADU,SAArB;AASD;AACF;AA3BQ;AAlBgB,CAA5B;AAiDAc,MAAM,CAACC,OAAP,GAAiB;AAChBhD,EAAAA,oBAAoB,EAApBA,oBADgB;AAEhBuC,EAAAA,sBAAsB,EAAtBA,sBAFgB;AAGhBO,EAAAA,mBAAmB,EAAnBA;AAHgB,CAAjB","sourcesContent":["// ##############################\n// // // javascript library for creating charts\n// #############################\nvar Chartist = require(\"chartist\");\n\n// ##############################\n// // // variables used to create animation on charts\n// #############################\nvar delays = 80,\n durations = 500;\nvar delays2 = 80,\n durations2 = 500;\n\n// ##############################\n// // // EngagementValue\n// #############################\n\nconst dailyEngagementValue = {\n data: {\n   labels: [\"M\", \"T\", \"W\", \"T\", \"F\"],\n   series: [[60, 80, 75, 70, 90]],\n },\n options: {\n   lineSmooth: Chartist.Interpolation.cardinal({\n     tension: 0\n   }),\n   low: 0,\n   high: 100, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n   chartPadding: {\n     top: 0,\n     right: -50,\n     bottom: -15,\n     left: 0\n   }\n },\n // for animation\n animation: {\n   draw: function(data) {\n     if (data.type === \"line\" || data.type === \"area\") {\n       data.element.animate({\n         d: {\n           begin: 600,\n           dur: 700,\n           from: data.path\n             .clone()\n             .scale(1, 0)\n             .translate(0, data.chartRect.height())\n             .stringify(),\n           to: data.path.clone().stringify(),\n           easing: Chartist.Svg.Easing.easeOutQuint\n         }\n       });\n     } else if (data.type === \"point\") {\n       data.element.animate({\n         opacity: {\n           begin: (data.index + 1) * delays,\n           dur: durations,\n           from: 0,\n           to: 1,\n           easing: \"ease\"\n         }\n       });\n     }\n   }\n }\n};\n\n// ##############################\n// // // Monthly Engagement Value\n// #############################\n\nconst monthlyEngagementValue = {\n data: {\n   labels: [\n     \"Jan\",\n     \"Feb\",\n     \"Mar\",\n     \"Apr\",\n     \"Mai\",\n     \"Jun\",\n     \"Jul\",\n     \"Aug\",\n     \"Sep\",\n     \"Oct\",\n     \"Nov\",\n     \"Dec\"\n   ],\n   series: [[54.2, 44.3, 32.0, 78.0, 55.3, 45.3, 32.6, 43.4, 56.8, 61.0, 75.6, 89.5]]\n },\n options: {\n   axisX: {\n     showGrid: false\n   },\n   low: 0,\n   high: 100,\n   chartPadding: {\n     top: 0,\n     right: 5,\n     bottom: -15,\n     left: 0\n   }\n },\n responsiveOptions: [\n   [\n     \"screen and (max-width: 640px)\",\n     {\n       seriesBarDistance: 5,\n       axisX: {\n         labelInterpolationFnc: function(value) {\n           return value[0];\n         }\n       }\n     }\n   ]\n ],\n animation: {\n   draw: function(data) {\n     if (data.type === \"bar\") {\n       data.element.animate({\n         opacity: {\n           begin: (data.index + 1) * delays2,\n           dur: durations2,\n           from: 0,\n           to: 1,\n           easing: \"ease\"\n         }\n       });\n     }\n   }\n }\n};\n\n// ##############################\n// // // Completed Tasks\n// #############################\n\nconst completedTasksChart = {\n data: {\n   labels: [\"12am\", \"3pm\", \"6pm\", \"9pm\", \"12pm\", \"3am\", \"6am\", \"9am\"],\n   series: [[230, 750, 450, 300, 280, 240, 200, 190]]\n },\n options: {\n   lineSmooth: Chartist.Interpolation.cardinal({\n     tension: 0\n   }),\n   low: 0,\n   high: 1000, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n   chartPadding: {\n     top: 0,\n     right: 0,\n     bottom: 0,\n     left: 0\n   }\n },\n animation: {\n   draw: function(data) {\n     if (data.type === \"line\" || data.type === \"area\") {\n       data.element.animate({\n         d: {\n           begin: 600,\n           dur: 700,\n           from: data.path\n             .clone()\n             .scale(1, 0)\n             .translate(0, data.chartRect.height())\n             .stringify(),\n           to: data.path.clone().stringify(),\n           easing: Chartist.Svg.Easing.easeOutQuint\n         }\n       });\n     } else if (data.type === \"point\") {\n       data.element.animate({\n         opacity: {\n           begin: (data.index + 1) * delays,\n           dur: durations,\n           from: 0,\n           to: 1,\n           easing: \"ease\"\n         }\n       });\n     }\n   }\n }\n};\n\nmodule.exports = {\n dailyEngagementValue,\n monthlyEngagementValue,\n completedTasksChart\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}