'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _clone = require('clone');

var _clone2 = _interopRequireDefault(_clone);

var _rafLoop = require('raf-loop');

var _rafLoop2 = _interopRequireDefault(_rafLoop);

var _keyframeX = require('keyframe-x');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Animate = function () {
	function Animate(options) {
		(0, _classCallCheck3.default)(this, Animate);

		options = (0, _extends3.default)({}, defaultOptions, options);
		for (var i in options) {
			this[i] = options[i];
		}
		this.reset();
		this.engine = (0, _rafLoop2.default)(this.step.bind(this));
	}

	(0, _createClass3.default)(Animate, [{
		key: 'reset',
		value: function reset() {
			this.stop();
			this.time = 0;
			this.keyframe = (0, _keyframeX.tween)(this.from, this.to);
			this.state = this.keyframe(0);
			this.onStep(this.state);
			return this;
		}
	}, {
		key: 'start',
		value: function start() {
			this.reset();
			this.animating = true;
			this.engine.start();
			return this;
		}
	}, {
		key: 'stop',
		value: function stop() {
			this.animating = false;
			if (this.engine) {
				this.engine.stop();
			}
			return this;
		}
	}, {
		key: 'pause',
		value: function pause() {
			this.stop();
			this.engine.stop();
			return this;
		}
	}, {
		key: 'unpause',
		value: function unpause() {
			this.animating = true;
			this.engine.start();
			return this;
		}
	}, {
		key: 'step',
		value: function step(delta) {
			this.time += delta;
			if (this.time >= this.duration) {
				if (!this.loop) {
					this.end();
					return this;
				} else {
					this.time -= this.duration;
				}
			}
			this.state = this.keyframe(this.easing(this.time / this.duration));
			this.onStep(this.state);
			return this;
		}
	}, {
		key: 'end',
		value: function end() {
			this.stop();
			this.state = this.keyframe(1);
			this.onStep(this.state);
			this.onEnd();
			return this;
		}
	}, {
		key: 'toggle',
		value: function toggle() {
			if (this.animating) {
				this.stop();
			} else {
				this.start();
			}
			return this;
		}
	}, {
		key: 'togglePause',
		value: function togglePause() {
			if (this.animating) {
				this.pause();
			} else {
				this.unpause();
			}
			return this;
		}
	}]);
	return Animate;
}();

var defaultOptions = {
	from: 0,
	to: 100,
	duration: 1000,
	time: 0,
	animating: false,
	easing: function easing(t) {
		return t;
	},
	onStart: noop,
	onStep: noop,
	onEnd: noop,
	loop: false
};

function noop() {}

exports.default = Animate;
//# sourceMappingURL=index.js.map